import uproot
import os
import argparse
import numpy as np
import ROOT

from array import array
# Sets batch mode so no popup window                                                                                                                                                                                  
ROOT.gROOT.SetBatch(True)
# Initialize parser                                                                                                                                                                                                   
parser = argparse.ArgumentParser()
parser.add_argument("--era", help="data era", type=str)
#parser.add_argument("--input")                                                                                                                                                                                       
args = vars(parser.parse_args())
input_file = "local.root"
year=args["era"]
output_file= "out.root"
# Gets relevant variables from file                                                                                                                                                                                   
def Events(f):
    evs=f['Events'].arrays(['HLT_IsoMu27',
                'HLT_Mu50',
                'Muon_pt',
                'Muon_eta',
                'Muon_dz',
                'Muon_dxy',
                'Muon_pfRelIso03_all',
                'Muon_pfRelIso03_chg',
                'Muon_mediumId',
                'Flag_goodVertices',
                'Flag_globalSuperTightHalo2016Filter',
                'Flag_HBHENoiseFilter',
                'Flag_HBHENoiseIsoFilter',
                'Flag_EcalDeadCellTriggerPrimitiveFilter',
                'Flag_BadPFMuonFilter',
                'Flag_BadPFMuonDzFilter',
                'Flag_eeBadScFilter',
                'Flag_ecalBadCalibFilter',
                'nJet',
                'HLT_PFMETNoMu120_PFMHTNoMu120_IDTight',
                'MET_phi',
                'Muon_phi',
                'MET_pt'
                            ])

    return evs

# Defines binning and histograms                                                                                                                                                                                      
mu_bin_edges=array('d',[0,2,4,6,8,10,12,
                         14,16,18,20,22,
                         24,26,28,30,32,
                         34,36,38,40,50,
                         60,70,80,90,100,
                         120,140,160,180,200])

# Defines W variables for cuts                                                                                                                                                                                        
def W_kinematics(evs):
    # px = pt*cos(phi)                                                                                                                                                                                                
    mu_px= evs["Muon_pt"] * np.cos(evs["Muon_phi"])
    # px = pt*sin(phi)                                                                                                                                                                                                
    mu_py= evs["Muon_pt"] * np.sin(evs["Muon_phi"])
    met_px= evs["MET_pt"] * np.cos(evs["MET_phi"])
    met_py= evs["MET_pt"] * np.sin(evs["MET_phi"])
    # normalized delta phi                                                                                                                                                                                            
    del_phi= np.abs((evs["MET_phi"] % 2*np.pi)-(evs["Muon_phi"] % 2*np.pi))
    # Transverse mass (squared)                                                                                                                                                                                       
    W_mt_2 = (2 * np.abs(evs["Muon_pt"])
              * np.abs(evs["MET_pt"])
              * (1 - np.cos(del_phi))  # from PDG review on kinematics, eq 38.61                                                                                                                                      
              )
    W_mt=np.sqrt(W_mt_2)
    W_ptx = mu_px + met_px
    W_pty = mu_py + met_py
    # pT of W                                                                                                                                                                                                         
    W_pt = np.sqrt(W_ptx**2 + W_pty**2)
    return W_mt, W_pt



# Function for filling the histograms                                                                                                                                                                                 

def muon_hists(events,etas,year,reg):
    mu_num=ROOT.TH1D("eta_"+reg+"_num","Muon events passing trigger eta region "+reg,len(mu_bin_edges)-1,mu_bin_edges)
    mu_denom=ROOT.TH1D("eta_"+reg+"_denom","Total Muon Events eta region "+reg,len(mu_bin_edges)-1,mu_bin_edges)
    eta_min=etas[0]
    eta_max=etas[1]
    # trigger                                                                                                                                                                                                         
    triggerSingleMuon = (
            events["HLT_IsoMu27"]
            | events["HLT_Mu50"]
        )
    # quality requirements for muons                                                                                                                                                                                  
    if year =="2018" or year =="2017":
        muon_quality_check = (
            (events['Flag_goodVertices'])
            &(events['Flag_globalSuperTightHalo2016Filter'])
            &(events['Flag_HBHENoiseFilter'])
            &(events['Flag_HBHENoiseIsoFilter'])
            &(events['Flag_EcalDeadCellTriggerPrimitiveFilter'])
            &(events['Flag_BadPFMuonFilter'])
            &(events['Flag_BadPFMuonDzFilter'])
            &(events['Flag_eeBadScFilter'])
            &(events['Flag_ecalBadCalibFilter'])
            &(events["Muon_mediumId"])
            & (events["Muon_pt"] > 10)
            & (np.abs(events["Muon_eta"]) < 2.4)
            & (np.abs(events["Muon_dz"]) < 0.1)
            & (np.abs(events["Muon_dxy"]) < 0.02)
            & (events["Muon_pfRelIso03_chg"] < 0.25)
            & (events["Muon_pfRelIso03_all"] < 0.25)
        )
    else:
        muon_quality_check = (
            (events['Flag_goodVertices'])
            &(events['Flag_globalSuperTightHalo2016Filter'])
            &(events['Flag_HBHENoiseFilter'])
            &(events['Flag_HBHENoiseIsoFilter'])
            &(events['Flag_EcalDeadCellTriggerPrimitiveFilter'])
            &(events['Flag_BadPFMuonFilter'])
            &(events['Flag_BadPFMuonDzFilter'])
            &(events['Flag_eeBadScFilter'])
            &(events["Muon_mediumId"])
            & (events["Muon_pt"] > 10)
            & (np.abs(events["Muon_eta"]) < 2.4)
            & (np.abs(events["Muon_dz"]) < 0.1)
            & (np.abs(events["Muon_dxy"]) < 0.02)
            & (events["Muon_pfRelIso03_chg"] < 0.15)
            & (events["Muon_pfRelIso03_all"] < 0.15)
)
 # cut on eta                                                                                                                                                                                                      
    eta_split=(
        (np.abs(events["Muon_eta"]) >= eta_min)
        & (np.abs(events["Muon_eta"]) < eta_max )
    )
    # Get W_mt and W_pt for cuts                                                                                                                                                                                      
    W_mt=W_kinematics(events)[0]
    W_pt=W_kinematics(events)[1]
    # cuts                                                                                                                                                                                                            
    cut = ((events['nJet']>0)
           &(events["MET_pt"]>30)
           &(events["HLT_PFMETNoMu120_PFMHTNoMu120_IDTight"])
           &(W_pt > 40 )
           & (W_mt <130 )
           &( W_mt > 30)
           )
    # Select based on trigger                                                                                                                                                                                         
    mu=events["Muon_pt"]
    tr_evs=mu[muon_quality_check & eta_split &  triggerSingleMuon & cut]
    evs=mu[muon_quality_check & eta_split & cut]

    #Fill histograms                                                                                                                                                                                                  
    for ev in tr_evs:
        for entry in ev:
            mu_num.Fill(entry)
    for ev in evs:
        for entry in ev:
            mu_denom.Fill(entry)

    return mu_num,mu_denom
with uproot.open(input_file) as f:
    evs=Events(f)
    W_mt_hist=ROOT.TH1D("W_mt_","W mt", 200,0,200)
    W_pt_hist=ROOT.TH1D("W_pt_","W pt", 200,0,200)
#    tmp_W_mt=W_kinematics(evs)[0]                                                                                                                                                                                    
#    tmp_W_pt=W_kinematics(evs)[1]                                                                                                                                                                                    
 #   for ev in evs:                                                                                                                                                                                                   
  #      for entry in ev:                                                                                                                                                                                             
   #         W_mt_hist.Fill(tmp_W_mt)                                                                                                                                                                                 
    #        W_pt_hist.Fill(tmp_W_pt)                                                                                                                                                                                 
    eta1=(muon_hists(evs,[0.0,0.9],year,"1"))
    print("eta1 complete")
    eta1_mu_num=eta1[0]
    eta1_mu_denom=eta1[1]
    eta2=(muon_hists(evs,[0.9,2.1],year,"2"))
    print("eta2 complete")
    eta2_mu_num=eta2[0]
    eta2_mu_denom=eta2[1]
    eta3=(muon_hists(evs,[2.1,2.4],year,"3"))
    print("eta3 complete")
    eta3_mu_num=eta3[0]
    eta3_mu_denom=eta3[1]

# Saves overall efficiency                                                                                                                                                                                            
root_file = ROOT.TFile(output_file,"RECREATE")
root_file.cd()
eta1_mu_num.Write()
eta1_mu_denom.Write()
eta2_mu_num.Write()
eta2_mu_denom.Write()
eta3_mu_num.Write()
eta3_mu_denom.Write()
#W_mt_hist.Write()                                                                                                                                                                                                    
#W_pt_hist.Write()                                                                                                                                                                                                    
root_file.Close()


